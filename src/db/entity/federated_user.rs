// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "federated_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: String,
    pub idp_id: String,
    pub protocol_id: String,
    pub unique_id: String,
    pub display_name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::federation_protocol::Entity",
        from = "(Column::ProtocolId, Column::IdpId)",
        to = "(super::federation_protocol::Column::Id, super::federation_protocol::Column::IdpId)",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    FederationProtocol,
    #[sea_orm(
        belongs_to = "super::identity_provider::Entity",
        from = "Column::IdpId",
        to = "super::identity_provider::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    IdentityProvider,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::federation_protocol::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FederationProtocol.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::identity_provider::Entity> for Entity {
    fn to() -> RelationDef {
        super::federation_protocol::Relation::IdentityProvider.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::federation_protocol::Relation::FederatedUser
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
