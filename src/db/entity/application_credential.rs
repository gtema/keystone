//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "application_credential")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub internal_id: i32,
    pub id: String,
    pub name: String,
    pub secret_hash: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub user_id: String,
    pub project_id: Option<String>,
    pub expires_at: Option<i64>,
    pub system: Option<String>,
    pub unrestricted: Option<i8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::application_credential_access_rule::Entity")]
    ApplicationCredentialAccessRule,
    #[sea_orm(has_many = "super::application_credential_role::Entity")]
    ApplicationCredentialRole,
}

impl Related<super::application_credential_access_rule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApplicationCredentialAccessRule.def()
    }
}

impl Related<super::application_credential_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApplicationCredentialRole.def()
    }
}

impl Related<super::access_rule::Entity> for Entity {
    fn to() -> RelationDef {
        super::application_credential_access_rule::Relation::AccessRule.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::application_credential_access_rule::Relation::ApplicationCredential
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
