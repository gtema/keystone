//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "local_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub user_id: String,
    pub domain_id: String,
    pub name: String,
    pub failed_auth_count: Option<i32>,
    pub failed_auth_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::password::Entity")]
    Password,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "(Column::UserId, Column::DomainId)",
        to = "(super::user::Column::Id, super::user::Column::DomainId)",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::password::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Password.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
