//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "group")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub domain_id: String,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub extra: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::expiring_user_group_membership::Entity")]
    ExpiringUserGroupMembership,
    #[sea_orm(has_many = "super::user_group_membership::Entity")]
    UserGroupMembership,
}

impl Related<super::expiring_user_group_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ExpiringUserGroupMembership.def()
    }
}

impl Related<super::user_group_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroupMembership.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_group_membership::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_group_membership::Relation::Group.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
