// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

pub mod prelude;

pub mod access_rule;
pub mod access_token;
pub mod alembic_version;
pub mod application_credential;
pub mod application_credential_access_rule;
pub mod application_credential_role;
pub mod assignment;
pub mod config_register;
pub mod consumer;
pub mod credential;
pub mod endpoint;
pub mod endpoint_group;
pub mod expiring_user_group_membership;
pub mod federated_identity_provider;
pub mod federated_user;
pub mod federation_protocol;
pub mod group;
pub mod id_mapping;
pub mod identity_provider;
pub mod idp_remote_ids;
pub mod implied_role;
pub mod limit;
pub mod local_user;
pub mod mapping;
pub mod nonlocal_user;
pub mod password;
pub mod policy;
pub mod policy_association;
pub mod project;
pub mod project_endpoint;
pub mod project_endpoint_group;
pub mod project_option;
pub mod project_tag;
pub mod region;
pub mod registered_limit;
pub mod request_token;
pub mod revocation_event;
pub mod role;
pub mod role_option;
pub mod sea_orm_active_enums;
pub mod sensitive_config;
pub mod service;
pub mod service_provider;
pub mod system_assignment;
pub mod token;
pub mod trust;
pub mod trust_role;
pub mod user;
pub mod user_group_membership;
pub mod user_option;
pub mod webauthn_credential;
pub mod webauthn_state;
pub mod whitelisted_config;

impl Default for role::Model {
    fn default() -> Self {
        Self {
            description: None,
            domain_id: String::new(),
            extra: None,
            id: String::new(),
            name: String::new(),
        }
    }
}

impl Default for user::Model {
    fn default() -> Self {
        Self {
            id: String::new(),
            extra: None,
            enabled: None,
            default_project_id: None,
            created_at: None,
            last_active_at: None,
            domain_id: String::new(),
        }
    }
}

impl Default for local_user::Model {
    fn default() -> Self {
        Self {
            id: 0,
            user_id: String::new(),
            domain_id: String::new(),
            name: String::new(),
            failed_auth_at: None,
            failed_auth_count: None,
        }
    }
}

impl Default for service::Model {
    fn default() -> Self {
        Self {
            id: String::new(),
            r#type: None,
            enabled: false,
            extra: None,
        }
    }
}

impl Default for endpoint::Model {
    fn default() -> Self {
        Self {
            id: String::new(),
            legacy_endpoint_id: None,
            interface: String::new(),
            service_id: String::new(),
            url: String::new(),
            enabled: false,
            extra: None,
            region_id: None,
        }
    }
}

impl Default for federated_identity_provider::Model {
    fn default() -> Self {
        Self {
            id: String::new(),
            name: String::new(),
            domain_id: None,
            oidc_discovery_url: None,
            oidc_client_id: None,
            oidc_client_secret: None,
            oidc_response_mode: None,
            oidc_response_types: None,
            jwt_validation_pubkeys: None,
            bound_issuer: None,
            provider_config: None,
        }
    }
}
