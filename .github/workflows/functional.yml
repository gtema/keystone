---
name: Functional and interoperability testing

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/functional.yml'
      - 'tests/**'
      - 'src/**'
      - 'policy/**'
env:
  DATABASE_URL: postgresql://keystone:1234@127.0.0.1:5432/keystone
  KEYSTONE_URL: http://localhost:8080
  OS_KEYSTONE_CONFIG_DIR: ${{ github.workspace }}/etc

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Enable cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pip
            ~/.cargo
          key: ${{ runner.os }}-integration

      - name: Rust Cache
        uses: swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
        with:
          toolchain: stable

      - name: Build Keystone
        run: cargo build

      - name: Move artifacts to the root
        run: mv target/debug/keystone* ./

      - uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Build policies
        run: just build-policy

      - name: Upload built binaries
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: keystone
          path: |
            keystone
            keystone-db
            policy.wasm

  interop:
    runs-on: ubuntu-latest
    needs:
      - build
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: keystone
          POSTGRES_PASSWORD: '1234'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Enable cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pip
            ~/.cargo
          key: ${{ runner.os }}-integration

      - name: Rust Cache
        uses: swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.12'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
        with:
          toolchain: stable

      - name: Fetch pre-built artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: keystone

      - name: Fix keystone permissions
        run: chmod u+x keystone keystone-db

      - name: Install necessary python packages
        run: pip install keystone uwsgi psycopg2

      - name: Install osc
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/gtema/openstack/releases/latest/download/openstack_cli-installer.sh | sh

      - name: Prepare keystone config file
        run: |
          mkdir -p etc
          cat <<EOF > etc/keystone.conf
          [auth]
          methods = password,token,openid,application_credential
          [database]
          connection = postgresql://keystone:1234@127.0.0.1:5432/keystone
          [fernet_receipts]
          key_repository = $(pwd)/etc/fernet
          [fernet_tokens]
          key_repository = $(pwd)/etc/fernet
          EOF
          cat etc/keystone.conf

      - name: Init keystone
        run: |
          mkdir -p etc/fernet
          keystone-manage --config-file etc/keystone.conf db_sync
          keystone-manage --config-file etc/keystone.conf fernet_setup
          keystone-manage --config-file etc/keystone.conf bootstrap --bootstrap-password password --bootstrap-public-url http://localhost:5001 --bootstrap-internal-url http://localhost:8080 --bootstrap-region-id dev

      - name: Prepare clouds.yaml
        run: |
          mkdir -p ~/.config/openstack
          cat <<EOF > ~/.config/openstack/clouds.yaml
          clouds:
            admin:
              auth:
                auth_url: http://localhost:5001
                username: admin
                password: password
                project_name: admin
                user_domain_id: default
                project_domain_id: default
              interface: public

            admin-rust:
              auth:
                auth_url: http://localhost:8080
                username: admin
                password: password
                project_name: admin
                user_domain_id: default
                project_domain_id: default
              interface: internal
          EOF

      - name: Start python keystone
        run: uwsgi --module "keystone.server.wsgi:initialize_public_application()" --http-socket :5001 -b 65535 --http-keepalive --so-keepalive --logformat "Request %(uri):%(method) returned %(status) in %(msecs)ms" > python.log 2>&1 &

      - name: Start rust keystone
        run: ./keystone -c ${{ github.workspace }}/etc/keystone.conf -vv > rust.log 2>&1 &

      - run: sleep 1

      - name: Test python keystone availability
        run: curl http://localhost:5001/v3

      - name: Test rust keystone availability
        run: curl http://localhost:8080/v3

      - name: Basic test using token validation
        run: |
          TOKEN1=$(osc --os-cloud admin auth login)
          TOKEN2=$(osc --os-cloud admin-rust auth login)

          echo "Use rust Keystone token against both Keystones"
          curl http://localhost:8080/v3/auth/tokens -H "X-Auth-Token: ${TOKEN1}" -H "X-Subject-Token: ${TOKEN1}" | jq
          curl http://localhost:5001/v3/auth/tokens -H "X-Auth-Token: ${TOKEN1}" -H "X-Subject-Token: ${TOKEN1}" | jq

          echo "Use python Keystone token against both Keystones"
          curl http://localhost:8080/v3/auth/tokens -H "X-Auth-Token: ${TOKEN2}" -H "X-Subject-Token: ${TOKEN2}" | jq
          curl http://localhost:5001/v3/auth/tokens -H "X-Auth-Token: ${TOKEN2}" -H "X-Subject-Token: ${TOKEN2}" | jq

      - name: Run interop tests
        run: cargo test --test interop

      - name: Dump python keystone log
        if: failure()
        run: cat python.log

      - name: Dump rust keystone log
        if: failure()
        run: cat rust.log

  federation:
    runs-on: ubuntu-latest
    needs:
      - build
    env:
      KEYCLOAK_URL: http://localhost:8082
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: keystone
          POSTGRES_PASSWORD: '1234'
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      keycloak:
        image: ghcr.io/gtema/keystone/keycloak-ci-service:26.2
        env:
          KC_BOOTSTRAP_ADMIN_USERNAME: admin
          KC_BOOTSTRAP_ADMIN_PASSWORD: password
        ports:
          - 8082:8080
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Enable cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pip
            ~/.cargo
          key: ${{ runner.os }}-integration

      - name: Rust Cache
        uses: swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.12'

      - name: Fetch pre-built artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: keystone

      - name: Fix keystone permissions
        run: chmod u+x keystone keystone-db

      - name: Install Rust
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
        with:
          toolchain: stable

      - name: Install browser
        # This is crucial for Selenium to interact with a browser
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox

      - name: Install necessary python packages
        run: pip install keystone uwsgi psycopg2

      - name: Prepare keystone config file
        run: |
          mkdir -p etc
          cat <<EOF > etc/keystone.conf
          [auth]
          methods = password,token,openid,application_credential
          [database]
          connection = postgresql://keystone:1234@127.0.0.1:5432/keystone
          [fernet_receipts]
          key_repository = $(pwd)/etc/fernet
          [fernet_tokens]
          key_repository = $(pwd)/etc/fernet
          EOF
          cat etc/keystone.conf

      - name: Init keystone
        run: |
          mkdir -p etc/fernet
          keystone-manage --config-file etc/keystone.conf db_sync
          keystone-manage --config-file etc/keystone.conf fernet_setup
          keystone-manage --config-file etc/keystone.conf bootstrap --bootstrap-password password --bootstrap-public-url http://localhost:8080

      - name: Apply Rust keystone DB changes
        run: ./keystone-db up

      - name: Start python keystone
        run: uwsgi --module "keystone.server.wsgi:initialize_public_application()" --http-socket :5001 -b 65535 --http-keepalive --so-keepalive --logformat "Request %(uri):%(method) returned %(status) in %(msecs)ms" > python.log 2>&1 &

      - name: Start rust keystone
        run: ./keystone -c ${{ github.workspace }}/etc/keystone.conf -vv > rust.log 2>&1 &

      - name: Start geckodriver for selenium
        run: /snap/bin/geckodriver --port=4444 > seleniumdriver.log 2>&1 &

      - name: Run keycloak tests
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: password
          BROWSERDRIVER_PORT: 4444
        run: cargo test --test keycloak

      - name: Dump rust keystone log
        if: failure()
        run: cat rust.log

      - name: Dump seleniumdriver log
        if: failure()
        run: cat seleniumdriver.log
